@using Entities
@using Business

<div class="form-group">
    <select class="form-control" @onchange="OnChangeWareHouse">
        <option value="">Seleccione una bodega...</option>
        @foreach (var warehouse in WareHouses)
        {
            <option value="@warehouse.WareHouseId">@warehouse.WareHouseName</option>
        }
    </select>
</div>
<hr />
<EditForm Model="oInOut">
    <div class="form-group">
        <InputSelect class="form-control" @bind-Value="oInOut.StorageId">
            <option value="">Seleccione un producto...</option>
            @foreach (var storage in storages)
            {
                <option value="@storage.StorageId">@storage.Product.ProductName</option>
            }
        </InputSelect>
    </div>
    <div class="form-group">
        <label>Escriba la cantidad</label>
        <InputNumber class="form-control" @bind-Value="oInOut.Quantity" />
    </div>
    <div class="form-group">
        <label>Es una entrada?</label>
        <InputCheckbox class="form-control" @bind-Value="oInOut.IsInput" />
    </div>
    <input type="button" value="@buttonValue" @onclick="SaveInOut" class="form-control" />
</EditForm>
<div class="text-center h4">
@message
</div>



@code {
    InputOutputEntity oInOut = new InputOutputEntity();

    List<WareHouseEntity> WareHouses = new List<WareHouseEntity>();

    List<StorageEntity> storages = new List<StorageEntity>();

    ProductEntity oProduct = new ProductEntity();
    StorageEntity oStorage = new StorageEntity();

    string message;


    string buttonValue => oInOut.IsInput ? "Registrar entrada" : "Registrar salida";

    protected override async Task OnInitializedAsync()
    {
        WareHouses = B_WareHouse.WareHouseList();
    }

    private void OnChangeWareHouse(ChangeEventArgs e) {
        var idWareHouse = e.Value.ToString();

        storages = B_Storage.StorageProductsByWareHouse(idWareHouse);
    }

    private void SaveInOut()
    {
        oStorage = storages.LastOrDefault(s => s.StorageId == oInOut.StorageId);
        oProduct = oStorage.Product;

        if (oInOut.IsInput)
        {
            oStorage.PartialQuantity = oStorage.PartialQuantity + oInOut.Quantity;
            B_Storage.UpdateStorage(oStorage);

            oProduct.TotalQunatity = oProduct.TotalQunatity + oInOut.Quantity;
            B_Product.UpdateProducts(oProduct);

            message = $"El producto {oProduct.ProductName} ha sido actualizado";
        }
        else
        {
            if (IsBiggerThanZero(oInOut.Quantity, oStorage.PartialQuantity))
            {

                oStorage.PartialQuantity = oStorage.PartialQuantity - oInOut.Quantity;
                B_Storage.UpdateStorage(oStorage);

                oProduct.TotalQunatity = oProduct.TotalQunatity - oInOut.Quantity;
                B_Product.UpdateProducts(oProduct);

                message = $"El producto {oProduct.ProductName} ha sido actualizadO";
            }
            else
            {
                message = $"No existe la cantidad suficiente en bodega para el pproducto {oProduct.ProductName}";
            }
        }

    }

    private bool IsBiggerThanZero(int quantity , int storageQuantity)
    {
        if (storageQuantity > quantity)
        {
            return true;
        }

        return false;
    }

}
